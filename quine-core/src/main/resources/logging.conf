logging.quine {

  appenders {
    console {
      class = "ch.qos.logback.core.ConsoleAppender"
      encoder {
        class = "ch.qos.logback.classic.encoder.PatternLayoutEncoder"
        charset = "UTF-8"
        # %date defaults to RFC 3339 datetime, which is almost the same as ISO 8601 except that the later uses "Z" to
        # separate the date and time, while RFC3339 allows any separator -- Logback uses a single space " "
        pattern = "%date %level [%mdc{akkaSource:-NotFromActor}] [%thread] %logger - %msg%n%ex"
      }
    }
    # default appender: safe to use from anywhere, drops TRACE/INFO/DEBUG level messages if nearing capacity,
    # and will drop all new events if at capacity. Contains a good amount of debug info. Logs to STDOUT via the
    # `console` appender. Suitable for most service logs.
    # See http://logback.qos.ch/manual/appenders.html#AsyncAppender
    asyncConsole {
      class = "ch.qos.logback.classic.AsyncAppender"
      neverBlock = true
      appenders = [ console ]
    }

    # Appender suitable for interactive output, lacking debug information
    consoleSimple {
      class = "ch.qos.logback.core.ConsoleAppender"
      encoder {
        class = "ch.qos.logback.classic.encoder.PatternLayoutEncoder"
        charset = "UTF-8"
        pattern = "%msg%n%ex"
      }
    }

    consoleTimestamped {
      class = "ch.qos.logback.core.ConsoleAppender"
      encoder {
        class = "ch.qos.logback.classic.encoder.PatternLayoutEncoder"
        charset = "UTF-8"
        pattern = "%date %msg%n%ex"
      }
    }

    # Appender suitable for user-facing output, lacking debug information but including timestamps. This appender will
    # ensure everything enqueued to it is eventually logged
    asyncTimestampedNoDrop {
      class = "ch.qos.logback.classic.AsyncAppender"
      queueSize = 1024 # chosen to match the default buffer size for a single standing query. The default is 256.
      discardingThreshold = 0 # Don't discard TRACE/DEBUG/INFO events until the queue is full
      neverBlock = false # block instead of dropping events when the queue is full
      appenders = [ consoleTimestamped ]
    }
    # Appender suitable for user-facing output, lacking debug information but including timestamps. This appender will
    # drop messages, regardless of log level, if there are too many to keep up with
    # See http://logback.qos.ch/manual/appenders.html#AsyncAppender
    asyncTimestamped {
      class = "ch.qos.logback.classic.AsyncAppender"
      queueSize = 1024 # chosen to match the default buffer size for a single standing query. The default is 256.
      discardingThreshold = 0 # Don't discard TRACE/DEBUG/INFO events until the queue is full
      neverBlock = true # drop events when the queue is full instead of blocking
      appenders = [ consoleTimestamped ]
    }
  }

  loggers {
    "com.thatdot" {
      level = WARN
      # Because "com.thatdot" isn't usable as a property name from system properties. It
      # contains periods, which without the quotes would get interpreted by Typesafe Config as path elements.
      # This allows overriding the above log level via system property with -Dthatdot.loglevel=INFO
      level = ${?thatdot.loglevel}
    }
    # an "interactive" logger - a heuristic for when to use this is to imagine a user who can only see the most recent
    # log line. For example, "Graph is ready!", "Quine is shutting down..." might be
    # useful logs for such a user, thus would be logged via this logger.
    "thatdot.Interactive" {
        level = INFO
        appenders = [ consoleSimple ]
        target = "System.err"
        # by default, lines logged via thatdot.Interactive will also get logged by the root logger. setting
        # additivity = false means we avoid duplicated log lines in standard out, at the cost of less consistent log
        # formatting. In a production deployment, this should be set to "true" (or commented out) and the root logger
        # should use a non-console appender (for example, logging to a file or a log aggregator)
        additivity = false
    }
    # A logger for StandingQueryResults used for PrintToStandardOut SQs in "Complete" mode
    "thatdot.StandingQueryResults" {
      level = DEBUG
      appenders = [ asyncTimestampedNoDrop ]
      # There's no need for the service log to include SQ output lines
      additivity = false
    }
    # A logger for StandingQueryResults used for PrintToStandardOut SQs in "FastSampling" mode
    "thatdot.StandingQueryResultsSampled" {
      level = DEBUG
      appenders = [ asyncTimestamped ]
      # There's no need for the service log to include SQ output lines
      additivity = false
    }
  }

  root {
    level = WARN
    level = ${?root.loglevel}
    appenders = [ asyncConsole ]
  }
}
