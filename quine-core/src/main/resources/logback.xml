<!-- https://logback.qos.ch/manual/configuration.html -->
<configuration>
    <!-- https://logback.qos.ch/manual/appenders.html#ConsoleAppender -->
    <import class="ch.qos.logback.core.ConsoleAppender"/>
    <!-- https://logback.qos.ch/manual/appenders.html#AsyncAppender -->
    <import class="ch.qos.logback.classic.AsyncAppender"/>

    <!-- Base appender for console appenders (NOT RECOMMENDED for direct usage; it can block Pekko Actors). -->
    <appender name="console" class="ConsoleAppender">
        <encoder>
            <!--
             %date defaults to RFC 3339 datetime, which is almost the same as ISO 8601 except that the latter uses "T"
             to separate the date and time, while RFC3339 allows any separator (Logback uses a single space, ' ').
             -->
            <pattern>%date %level [%mdc{pekkoSource:-NotFromActor}] [%thread] %logger - %msg%n%ex</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--
     Default appender: safe to use from anywhere, drops TRACE/INFO/DEBUG level messages if nearing capacity,
     and will drop all new events if at capacity. Contains a good amount of debug info. Logs to STDOUT via the
     `console` appender. Suitable for most service logs.
     -->
    <appender name="asyncConsole" class="AsyncAppender">
        <appender-ref ref="console"/>
        <neverBlock>true</neverBlock>
    </appender>

    <!-- Appender lacking debug information and timestamp. -->
    <appender name="consoleSimple" class="ConsoleAppender">
        <encoder>
            <pattern>%msg%n%ex</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- Appender lacking debug information and timestamp that writes to STDERR. Suitable for "interactive" output. -->
    <appender name="consoleSimpleErr" class="ConsoleAppender">
        <encoder>
            <pattern>%msg%n%ex</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <target>System.err</target>
    </appender>

    <!-- Appender suitable for interactive output, lacking debug information, but including timestamps. -->
    <appender name="consoleTimestamped" class="ConsoleAppender">
        <encoder>
            <pattern>%date %msg%n%ex</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--
     Appender lacking debug information, including timestamp. May drop messages, regardless of level,
     if there are too many to keep up with. Suitable for user-facing logs.
     Note: Allowing a higher (even the default) `discardingThreshold` can increase throughput significantly.
     -->
    <appender name="asyncTimestamped" class="AsyncAppender">
        <appender-ref ref="consoleTimestamped"/>
        <queueSize>1024</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <neverBlock>true</neverBlock>
    </appender>

    <!--
     Appender lacking debug information, including timestamp. Ensures everything enqueued to it is
     eventually logged. Suitable for user-facing logs.
     Note: Allowing a higher (even the default) `discardingThreshold` can increase throughput significantly.
     -->
    <appender name="asyncTimestampedNoDrop" class="AsyncAppender">
        <appender-ref ref="consoleTimestamped"/>
        <queueSize>1024</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <neverBlock>false</neverBlock>
    </appender>

    <!--
     Appender lacking debug information and timestamp. Ensures everything enqueued to it is
     eventually logged. Suitable for audit logs.
     Note: allowing a higher (even the default) `discardingThreshold` can increase throughput significantly.
     -->
    <appender name="asyncSimpleNoDrop" class="AsyncAppender">
        <appender-ref ref="consoleSimple"/>
        <queueSize>1024</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <neverBlock>false</neverBlock>
    </appender>

    <!--
     An "interactive" logger. A heuristic for when to use this is to imagine a user who can only see the most
     recent log line. For example, "Graph is ready!", "Quine is shutting down..." might be useful logs for such
     a user, thus would be logged via this logger.

     Messages to this logger also get logged by the root logger, unless `additivity = "false"`.
     We set that here by default to avoid duplicating log lines in standard out (at the cost of more consistent
     log formatting). In a production deployment, `additivity` may be set to "true" (the default).
     -->
    <logger name="thatdot.Interactive" level="INFO" additivity="false">
        <appender-ref ref="consoleSimpleErr"/>
    </logger>

    <!--
     Logger for StandingQueryResults used for PrintToStandardOut SQs in "Complete" mode.

     Messages to this logger also get logged by the root logger, unless `additivity = "false"`.
     We set that here by default to avoid duplicating log lines in standard out (at the cost of more consistent
     log formatting). In a production deployment, `additivity` may be set to "true" (the default).
    -->
    <logger name="thatdot.StandingQueryResults" level="DEBUG" additivity="false">
        <appender-ref ref="asyncTimestampedNoDrop"/>
    </logger>

    <!--
     Logger for StandingQueryResults used for PrintToStandardOut SQs in "FastSampling" mode.

     Messages to this logger also get logged by the root logger, unless `additivity = "false"`.
     We set that here by default to avoid duplicating log lines in standard out (at the cost of more consistent
     log formatting). In a production deployment, `additivity` may be set to "true" (the default).
     -->
    <logger name="thatdot.StandingQueryResultsSampled" level="DEBUG" additivity="false">
        <appender-ref ref="asyncTimestamped"/>
    </logger>

    <!-- Logger for influx reporting. Note: Influx can generate huge numbers of log messages. -->
    <logger name="metrics_influxdb" level="ERROR"/>

    <!--
     Logger for all class-named loggers in our namespace.
     Log level can be set with `root.loglevel` and `thatdot.loglevel`.
     -->
    <logger name="com.thatdot" level="${thatdot.loglevel:-WARN}"/>

    <!--
     Logger for audit-worthy events. Off by default. Turn on with `thatdot.audit.loglevel=INFO`.

     Messages to this logger also get logged by the root logger, unless `additivity = "false"`.
     We set that here by default to avoid duplicating log lines in standard out (at the cost of more consistent
     log formatting). In a production deployment, `additivity` may be set to "true" (the default).
     -->
    <logger name="thatdot.Audit" level="${thatdot.audit.loglevel:-OFF}" additivity="false">
        <appender-ref ref="asyncSimpleNoDrop"/>
    </logger>

    <!-- Root logger. -->
    <root level="${root.loglevel:-WARN}">
        <appender-ref ref="asyncConsole"/>
    </root>

</configuration>
